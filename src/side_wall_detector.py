#!/usr/bin/env python

# import #
import rospy
import math

from std_msgs.msg import *
from sensor_msgs.msg import *
from wall_detection.msg import wall_dist

# node initialization #
rospy.init_node("side_wall_detector")

# Variables #
scan = LaserScan()
ranges = [0.0, 0.0, 0.0, 0.1574999988079071, 0.0, 0.1574999988079071, 0.0, 0.0, 
0.15950000286102295, 0.0, 0.0, 0.15950000286102295, 0.0, 0.15925000607967377, 0.0, 0.0, 
0.1602499932050705, 0.0, 0.0, 0.1602499932050705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
0.6700000166893005, 0.0, 0.0, 0.6600000262260437, 0.0, 0.6570000052452087, 0.0, 0.0, 
0.6579999923706055, 0.0, 0.6600000262260437, 0.0, 0.0, 0.6629999876022339, 0.0, 
0.6639999747276306, 0.0, 0.0, 0.6669999957084656, 0.0, 0.0, 0.6690000295639038, 0.0, 
0.671999990940094, 0.0, 0.0, 0.6740000247955322, 0.0, 0.6769999861717224, 0.0, 0.0, 
0.6800000071525574, 0.0, 0.6830000281333923, 0.0, 0.0, 0.6859999895095825, 0.0, 0.0, 
0.6890000104904175, 0.0, 0.6930000185966492, 0.0, 0.0, 0.6959999799728394, 0.0, 
0.6990000009536743, 0.0, 0.0, 0.703000009059906, 0.0, 0.0, 0.7070000171661377, 0.0, 
0.7110000252723694, 0.0, 0.0, 0.7149999737739563, 0.0, 0.0, 0.7200000286102295, 0.0, 
0.7239999771118164, 0.0, 0.0, 0.7279999852180481, 0.0, 0.7329999804496765, 0.0, 0.0, 
0.7379999756813049, 0.0, 0.0, 0.7429999709129333, 0.0, 0.7480000257492065, 0.0, 0.0, 
0.753000020980835, 0.0, 0.7590000033378601, 0.0, 0.0, 0.7639999985694885, 0.0, 
0.7699999809265137, 0.0, 0.0, 0.7760000228881836, 0.0, 0.0, 0.7829999923706055, 0.0, 
0.7889999747276306, 0.0, 0.0, 0.7960000038146973, 0.0, 0.8029999732971191, 0.0, 0.0, 
0.8100000023841858, 0.0, 0.0, 0.8159999847412109, 0.0, 0.8240000009536743, 0.0, 0.0, 
0.8320000171661377, 0.0, 0.8399999737739563, 0.0, 0.0, 0.8489999771118164, 0.0, 0.0, 
0.8579999804496765, 0.0, 0.8669999837875366, 0.0, 0.0, 0.875, 0.0, 0.8849999904632568, 
0.0, 0.0, 0.8949999809265137, 0.0, 0.0, 0.906000018119812, 0.0, 0.9160000085830688, 0.0, 
0.0, 0.9269999861717224, 0.0, 0.0, 0.9390000104904175, 0.0, 0.9509999752044678, 0.0, 0.0, 
0.9620000123977661, 0.0, 0.9760000109672546, 0.0, 0.0, 0.9890000224113464, 0.0, 0.0, 
1.0019999742507935, 0.0, 1.0169999599456787, 0.0, 0.0, 1.031999945640564, 0.0, 0.0, 
1.0470000505447388, 0.0, 1.0640000104904175, 0.0, 0.0, 1.0800000429153442, 0.0, 
1.0980000495910645, 0.0, 0.0, 1.1160000562667847, 0.0, 0.0, 1.1339999437332153, 0.0, 
1.1549999713897705, 0.0, 0.0, 1.1749999523162842, 0.0, 0.0, 1.1970000267028809, 0.0, 
1.218999981880188, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.274999976158142, 
0.0, 1.2660000324249268, 0.0, 0.0, 1.2669999599456787, 0.0, 1.2610000371932983, 0.0, 0.0, 
1.2549999952316284, 0.0, 0.0, 0.0, 1.024999976158142, 0.0, 0.0, 1.0119999647140503, 0.0, 
1.0, 0.0, 0.0, 0.9929999709129333, 0.0, 0.9869999885559082, 0.0, 0.0, 0.9800000190734863, 
0.0, 0.9750000238418579, 0.0, 0.0, 0.9700000286102295, 0.0, 0.9649999737739563, 0.0, 0.0, 
0.9610000252723694, 0.0, 0.9570000171661377, 0.0, 0.0, 0.9520000219345093, 0.0, 
0.9490000009536743, 0.0, 0.0, 0.9449999928474426, 0.0, 0.0, 0.9419999718666077, 0.0, 
0.9399999976158142, 0.0, 0.0, 0.9470000267028809, 0.0, 0.9240000247955322, 0.0, 0.0, 
0.9309999942779541, 0.0, 0.9279999732971191, 0.0, 0.9259999990463257, 0.0, 0.0, 
0.9240000247955322, 0.0, 0.0, 0.9229999780654907, 0.0, 0.9190000295639038, 0.0, 0.0, 
0.9169999957084656, 0.0, 0.9160000085830688, 0.0, 0.0, 0.9129999876022339, 0.0, 
0.9120000004768372, 0.0, 0.0, 0.9110000133514404, 0.0, 0.9079999923706055, 0.0, 0.0, 
0.9089999794960022, 0.0, 0.0, 0.9070000052452087, 0.0, 0.906000018119812, 0.0, 0.0, 
0.9079999923706055, 0.0, 0.906000018119812, 0.0, 0.0, 0.9049999713897705, 0.0, 
0.9139999747276306, 0.0, 0.0, 0.906000018119812, 0.0, 0.906000018119812, 0.0, 0.0, 
0.9070000052452087, 0.0, 0.906000018119812, 0.0, 0.0, 0.9049999713897705, 0.0, 0.0, 
0.9070000052452087, 0.0, 0.906000018119812, 0.0, 0.0, 0.9079999923706055, 0.0, 
0.9079999923706055, 0.0, 0.0, 0.9070000052452087, 0.0, 0.9100000262260437, 0.0, 0.0, 
0.9089999794960022, 0.0, 0.0, 0.9110000133514404, 0.0, 0.9110000133514404, 0.0, 0.0, 
0.9110000133514404, 0.0, 0.9129999876022339, 0.0, 0.0, 0.9150000214576721, 0.0, 
0.9169999957084656, 0.0, 0.0, 0.9179999828338623, 0.0, 0.9290000200271606, 0.0, 0.0, 
0.921999990940094, 0.0, 0.0, 0.9240000247955322, 0.0, 0.925000011920929, 0.0, 0.0, 
0.9279999732971191, 0.0, 0.9309999942779541, 0.0, 0.0, 0.9330000281333923, 0.0, 
0.9369999766349792, 0.0, 0.0, 0.9359999895095825, 0.0, 0.0, 0.9409999847412109, 0.0, 
0.9390000104904175, 0.0, 0.0, 0.9459999799728394, 0.0, 0.9480000138282776, 0.0, 0.0, 
0.9520000219345093, 0.0, 0.9549999833106995, 0.0, 0.0, 0.9570000171661377, 0.0, 0.0, 
0.9629999995231628, 0.0, 0.9660000205039978, 0.0, 0.0, 0.9710000157356262, 0.0, 
0.9700000286102295, 0.0, 0.0, 0.9789999723434448, 0.0, 0.9829999804496765, 0.0, 0.0, 
0.9879999756813049, 0.0, 0.0, 0.9940000176429749, 0.0, 1.0010000467300415, 0.0, 0.0, 
1.0069999694824219, 0.0, 1.0119999647140503, 0.0, 0.0, 1.0180000066757202, 0.0, 0.0, 
1.024999976158142, 0.0, 1.031000018119812, 0.0, 0.0, 1.0369999408721924, 0.0, 
1.0449999570846558, 0.0, 0.0, 1.0529999732971191, 0.0, 0.0, 1.059999942779541, 0.0, 
1.0770000219345093, 0.0, 0.0, 1.0729999542236328, 0.0, 1.0850000381469727, 0.0, 0.0, 
1.0950000286102295, 0.0, 1.1019999980926514, 0.0, 0.0, 1.1109999418258667, 0.0, 0.0, 
1.121000051498413, 0.0, 1.1380000114440918, 0.0, 0.0, 1.1380000114440918, 0.0, 
1.152999997138977, 0.0, 0.0, 1.1619999408721924, 0.0, 0.0, 1.1729999780654907, 0.0, 
1.1829999685287476, 0.0, 0.0, 1.2000000476837158, 0.0, 1.2070000171661377, 0.0, 0.0, 
1.2200000286102295, 0.0, 0.0, 1.2339999675750732, 0.0, 1.2450000047683716, 0.0, 0.0, 
1.2589999437332153, 0.0, 1.2740000486373901, 0.0, 0.0, 1.2860000133514404, 0.0, 
1.2999999523162842, 0.0, 0.0, 1.3179999589920044, 0.0, 0.0, 1.3380000591278076, 0.0, 
1.3519999980926514, 0.0, 0.0, 1.3680000305175781, 0.0, 1.3860000371932983, 0.0, 0.0, 
1.4040000438690186, 0.0, 0.0, 1.4279999732971191, 0.0, 1.444000005722046, 0.0, 0.0, 
1.468000054359436, 0.0, 1.49399995803833, 0.0, 0.0, 1.5140000581741333, 0.0, 0.0, 
1.5379999876022339, 0.0, 1.562999963760376, 0.0, 0.0, 1.5870000123977661, 0.0, 
1.6109999418258667, 0.0, 0.0, 1.6390000581741333, 0.0, 1.6699999570846558, 0.0, 0.0, 
1.6990000009536743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.305000066757202, 0.0, 0.0, 
2.3350000381469727, 0.0, 0.0, 2.384999990463257, 0.0, 2.437000036239624, 0.0, 0.0, 
2.490000009536743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
0.0, 0.0, 0.0, 2.9590001106262207, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
0.0, 0.0, 0.0, 0.0, 0.1315000057220459, 0.12700000405311584, 0.0, 0.12725000083446503, 
0.0, 0.0, 0.12800000607967377, 0.0, 0.0, 0.12825000286102295, 0.0, 0.12825000286102295, 
0.0, 0.0]
ang_sweep = Float32()
# ang_start = Float32()
# ang_increament = Float32()
side_wall =  wall_dist()

# definitions of functions #
def zero_filter(list_var):
    if 0 in list_var:
        for i in range(len(list_var)):
            if 0 in list_var: list_var.remove(0)
    return list_var

# definition of callback #
def lidar_callback(lidar_msg):
    global ang_sweep
    right_wall = []
    left_wall = []
    scan = lidar_msg
    ang_start = scan.angle_min
    # ang_sweep = ang_start
    for i in range(len(scan.ranges)):
        ang_sweep = ang_start + (i*scan.angle_increment)
        if (-95*(math.pi/180)) < ang_sweep < (-85*(math.pi/180)):
            if scan.ranges[i] != 0: right_wall.append(scan.ranges[i])
        elif (85*(math.pi/180)) < ang_sweep < (95*(math.pi/180)):
            if scan.ranges[i] != 0: left_wall.append(scan.ranges[i])
    # print(right_wall)
    side_wall.right = min(right_wall)
    side_wall.left = min(left_wall)


# definition of publisher/subscriber and services #
rospy.Subscriber('scan', LaserScan, lidar_callback)
side_wall_pub = rospy.Publisher('side_wall', wall_dist, queue_size = 10)

# main program #
r = rospy.Rate(30)  #30 Hz

while not rospy.is_shutdown():
    side_wall_pub.publish(side_wall)
    r.sleep()
